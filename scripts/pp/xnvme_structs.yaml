structs_1:
      - name: "xnvme_geo"
        obj:  "geo"
        members:
                type: 'xnvme_geo_type_str'
                npugrp: '%u'
                npunit: '%u'
                nzone: '%u'
                nsect: '%zu'
                nbytes: '%u'
                nbytes_oob: '%u'
                tbytes: '%zu'
                mdts_nbytes: '%u'
                lba_nbytes: '%u'
                lba_extended: '%u'

      - name: "xnvme_ident"
        obj:  "ident"
        members:
                trgt:  '%s'
                schm:  '%s'
                opts:  '%s'
                uri:   '%s'

      - name: "xnvme_be"
        obj:  "be"
        members:
                async:
                        id : '%s'
                        enabled : '%zu'
                sync:
                        id : '%s'
                        enabled : '%zu'
                attr:
                        name : '%s'
                        enabled : '%zu'

      - name: "xnvme_spec_log_erri_entry"
        obj: "entry"
        members:
                ecnt: '%zu'
                sqid: '%u'
                cid:  '%u'
                status: '%#x'
                eloc:   '%#x'
                lba:    '%#lx'
                nsid:   '%u'
                ven_si: '%#x'
                trtype: '%#x'
                cmd_si: '%#lx'
                trtype_si: '%#x'

      - name: "xnvme_spec_znd_descr"
        obj: "descr"
        members:
                zslba: '0x%016lx'
                wp:    '0x%016lx'
                zcap:  '%zu'
                zt:    '%#x'
                zs:    '%*s'
                za:    '0b"XNVME_I8_FMT"'
 
      - name: "xnvme_spec_nvm_scopy_fmt_zero"
        obj: "entry"
        members:
                slba:  '0x%016lx'
                nlb:   '%u'
                eilbrt: '0x%08x'
                elbatm: '0x%08x'
                elbat:  '0x%08x'

      - name: "xnvme_dev_cmd_opts_yaml"
        obj:  "dev"
        yaml_args: { dev: 'const struct xnvme_dev *', indent: 'int', sep: 'const char *', head: 'int' }
        members:
                cmd_opts:  '"XNVME_I32_FMT"'
                iomd?: {mem_fmt: '%s', cond: 'dev->cmd_opts & XNVME_CMD_SYNC', opt_1: 'SYNC', opt_2: 'ASYNC' }
                payload_data?: {mem_fmt: '%s', cond: 'dev->cmd_opts & XNVME_CMD_UPLD_SGLD', opt_1: 'USER', opt_2: 'DRV' }
                payload_meta?: {mem_fmt: '%s', cond: 'dev->cmd_opts & XNVME_CMD_UPLD_SGLM', opt_1: 'USER', opt_2: 'DRV'  }
                csi:       '0x%x%s'
                nsid:      '0x%u%s'
                ssw:       '%"PRIu64"' 

structs_2:

      - name: "xnvme_spec_log_health_entry"
        obj:  "log"
        arguments: { idfy: 'const struct xnvme_spec_log_health_entry *', opts: 'int' }
        members:
                crit_warn: '%u'
                comp_temp: '%u'
                avail_spare: '%u'
                avail_spare_thrash: '%u'
                pct_used:  '%u'
                eg_crit_warn_sum: '%u'
                data_units_read[]16: '%.0Lf:bytes2double'
                data_units_written[]16: '%.0Lf:bytes2double'
                host_read_cmds[]16:  '%.0Lf:bytes2double'
                host_write_cmds[]16: '%.0Lf:bytes2double'
                ctrlr_busy_time[]16: '%.0Lf:bytes2double'
                pwr_cycles[]16: '%.0Lf:bytes2double'
                pwr_on_hours[]16: '%.0Lf:bytes2double'
                unsafe_shutdowns[]16: '%.0Lf:bytes2double'
                nr_err_logs[]16: '%.0Lf:bytes2double'
                warn_comp_temp_time: '%u'
                crit_comp_temp_time: '%u'
                temp_sens[]8: '%u'
                tmt1tc:       '%u'
                tmt2tc:       '%u'
                tttmt1:       '%u'
                tttmt2:       '%u'

      - name: "xnvme_spec_idfy_ctrlr"
        obj:  "idfy"
        arguments: { idfy: 'struct xnvme_spec_idfy_ctrlr *', opts: 'int' }
        members:
                vid:    '%#x'
                ssvid:  '%#x'
                sn:     '%-.*s:XNVME_SPEC_CTRLR_SN_LEN'
                mn:     '%-.*s:XNVME_SPEC_CTRLR_MN_LEN'
                fr:     '%-.*s:XNVME_SPEC_CTRLR_FR_LEN'
                rab:    '%d'
                ieee[]3: '%02x'
                cmic:
                        val: '%#x'
                mdts:   '%d'
                cntlid: '%#x'
                ver:
                        val:    '%#x'
                rtd3r:  '%#x'
                rtd3e:  '%#x'
                oaes:
                        val:   '%#x'
                ctratt:
                        val: '%#x'
                oacs:
                        val:  '%#x'
                acl:    '%d'
                aerl:   '%d'
                frmw:   '%#x'
                lpa:
                        ns_smart:  '%u'
                        celp:   '%u'
                        edlp:   '%u'
                        telemetry:  '%u'
                        val:    '%#x'
                elpe:   '%d'
                npss:   '%d'
                avscc:
                        val:   '%#x'
                apsta:
                        val:   '%#x'
                wctemp:      '%d'
                cctemp:      '%d'
                mtfa:        '%d'
                hmpre:       '%d'
                hmmin:       '%d'
                tnvmcap[]2:  '%zu'
                unvmcap[]2:  '%zu'
                rpmbs:
                        val:   '%#x'
                edstt:       '%d'
                dsto:
                        val:        '%d'
                fwug:        '%d'
                kas:         '%d'
                hctma:
                        val:       '%#x'
                mntmt:       '%d'
                mxtmt:       '%d'
                sanicap:
                        val:     '%#x'
                sqes:
                        val:        '%#x'
                cqes:
                        val:        '%#x'
                maxcmd:          '%d'
                nn:             '%d'
                oncs:
                        val:           '%#x'
                fuses:          '%#x'
                fna:
                        val:        '%#x'
                vwc:
                        val:        '%#x'
                awun:           '%d'
                awupf:          '%d'
                nvscc:          '%d'
                acwu:           '%d'
                sgls:
                        val:       '%#x'
                subnqn:         '%-.*s'

      - name: "xnvme_spec_idfy_ns"
        obj:  "idfy"
        arguments: { idfy: 'const struct xnvme_spec_idfy_ns *', opts: 'int' }
        members:
                nsze:   '%zu'
                ncap:   '%zu'
                nuse:   '%zu'
                nlbaf:  '%d'
                nsfeat:
                        thin_prov:      '%d'
                        ns_atomic_write_unit:   '%d'
                        dealloc_or_unwritten_error:     '%d'
                        guid_never_reused:      '%d'
                        reserved1:       '%d'
                flbas:
                        format:  '%d'
                        extended:  '%d'
                        reserved2: '%d'
                mc:
                        extended:  '%d'
                        pointer:  '%d'
                        reserved3:  '%d'
                dpc:
                        val:  '%#x'
                dps:
                        val:  '%#x'
                nsrescap:
                        val:  '%#x'
                fpi:
                        val:  '%#x'
                dlfeat:
                        val:  '%#x'
                nawun:  '%#x'
                nawupf: '%#x'
                nacwu:  '%#x'
                nabsn:  '%#x'
                nabspf: '%#x'
                noiob:  '%#x'
                nvmcap: ''
                nvmcap[0]: '- %zu'
                nvmcap[1]: '- %zu'
                nguid[]16: '%#x'
                eui64:    '%zu'
                ms:   'meta-data-size-in-nbytes' 
                ds:   'data-size in 2^ds bytes'
                rp:   'relative performance 00b, 1b 10b, 11b'
                lbaf[]16:
                        ms:  '%u'
                        ds:  '%u'
                        rp:  '%u'

      - name: "xnvme_spec_nvm_idfy_ctrlr"
        obj:  "idfy"
        arguments: { idfy: 'struct xnvme_spec_idfy_ctrlr *', opts: 'int'  }
        members:
                oncs:
                        compare:  '%u'
                        write_unc:  '%u'
                        dsm:       '%u'
                        write_zeros:  '%u'
                        set_features_save: '%u'
                        reservations:  '%u'
                        timestamp:  '%u'
                        verify:  '%u'
                        copy:    '%u'
                ocfs:
                        copy_fmt0: '%u'

      - name: "xnvme_spec_nvm_idfy_ns"
        obj:  "idfy"
        arguments: { idfy: 'struct xnvme_spec_nvm_idfy_ns *', opts: 'int'  }
        members:
                mcl:   '%d'
                mssrl: '%d'
                msrc:  '%d'

      - name: "xnvme_spec_znd_report_hdr"
        obj:  "hdr"
        arguments: { hdr: 'const struct xnvme_spec_znd_report_hdr *', opts: 'int'  }
        members:
                nzones: '%zu'

      - name: "xnvme_spec_znd_idfy_ctrlr"
        obj:  "zctrlr"
        arguments: { zctrlr: 'struct xnvme_spec_idfy_ctrlr *', opts: 'int'  }
        members:
                zasl:  '%d'

      - name: "xnvme_spec_idfy_cs"
        obj:  "idfy"
        arguments: { idfy: 'const struct xnvme_spec_idfy_cs *', opts: 'int'  }
        members:
                iocscv[]XNVME_SPEC_IDFY_CS_IOCSC_LEN/512:
                                                        info: 'const struct xnvme_spec_cs_vector *iocscv = &idfy->iocsc[i];
                                                               if (!iocscv->val) {
                                                               continue;
                                                               }'
                                                        val: '0x%lx'
                                                        nvm:  '%d'
                                                        zns:  '%d'

 
      - name: "xnvme_spec_cmd"
        obj:  "cmd"
        intial:
                descr: 'uint32_t *cdw = (void *)cmd;'
        arguments: { cmd: 'struct xnvme_spec_cmd *', opts: 'int' }
        switch: "opts"
        members:
                '0x0':
                    cdw[]16: '- "XNVME_I32_FMT"'
                '0x1':
                    cdw[]16: '- %#04x'
                '0x2':
                    cdw[]16: 'cdw%01d: %#04x'
                '0x3':
                    cdw[2]: '%#04x'
                    cdw[3]: '%#04x'
                    cdw[10]: '%#04x'
                    cdw[11]: '%#04x'
                    cdw[12]: '%#04x'
                    cdw[13]: '%#04x'
                    cdw[14]: '%#04x'
                    cdw[15]: '%#04x'
                    common:
                           opcode: '%#02x'
                           fuse:   '%#x'
                           rsvd:   '%#x'
                           psdt:   '%#x'
                           cid:    '%#04x'
                           nsid:   '%#04x'
                           mptr:  '%#08lx'
                           dptr.prp.prp1: '%#08lx'
                           dptr.prp.prp2: '%#08lx'

      - name: "xnvme_spec_feat"
        obj:  "feat"
        arguments: { fid: 'uint8_t',  feat: 'struct xnvme_spec_feat', opts: 'int' }
        switch: "fid"
        members:
                XNVME_SPEC_FEAT_ERROR_RECOVERY(error_recovery):
                                                                dulbe: '%x'
                                                                tler:  '%x'
                XNVME_SPEC_FEAT_TEMP_THRESHOLD(temp_threshold):
                                                                tmpth: '%u'
                                                                tmpsel: '0x%x'
                                                                thsel: '0x%x'
                XNVME_SPEC_FEAT_NQUEUES(nqueues):
                                                     nsqa: '%u'
                                                     ncqa: '%u'
                XNVME_SPEC_FEAT_ARBITRATION:
                XNVME_SPEC_FEAT_PWR_MGMT:
                XNVME_SPEC_FEAT_LBA_RANGETYPE:
                default(fid):
                        ENOSYS printer not implemented for fid: '%x'

      - name: "xnvme_spec_nvm_scopy_source_range"
        obj:  "srange"
        arguments: { srange: 'const struct xnvme_spec_nvm_scopy_source_range *', nr: 'uint8_t', opts: 'int' }
        members:
                nranges: {mem_fmt: '%d', mem_val: 'nr+1'}
                nr: {mem_fmt: '%d', mem_val: 'nr'}
                entries: 'none'
                XNVME_SPEC_NVM_SCOPY_NENTRY_MAX[]yaml:
                        xnvme_spec_nvm_scopy_fmt_zero_yaml: ['stream', '&srange->entry[i]', '0', '","']

      - name: "xnvme_spec_log_erri_entry"
        obj:  "log"
        arguments: { log: 'const struct xnvme_spec_log_erri_entry *', limit: 'int', opts: 'int' }
        members:
                limit[]yaml:
                        xnvme_spec_log_erri_entry_yaml: ['stream', '&log[i]', '0', '","']

      - name: "xnvme_spec_znd_idfy_lbafe"
        obj:  "zonef"
        arguments: { zonef: 'struct xnvme_spec_znd_idfy_lbafe *', opts: 'int' }
        members: 
                zsze: '%zu'
                zdes: '%d'

      - name: "xnvme_spec_znd_idfy_ns"
        obj:  "zns"
        arguments: { zns: 'struct xnvme_spec_znd_idfy_ns *', opts: 'int' }
        members:
                zoc:
                    vzcap: '%d'
                    zae:  '%d'
                ozcs:
                    razb: '%d'
                mar:  '%u'
                mor:  '%u'
                rrl:  '%u'
                frl:  '%u'
                lbafe: 'none'
                '16[]yaml':
                        xnvme_spec_znd_idfy_lbafe_fpr: ['stream', '&zns->lbafe[i]', 'opts']
 
      - name: "xnvme_spec_znd_log_changes"
        obj:  "changes"
        arguments: { changes: 'const struct xnvme_spec_znd_log_changes *', opts: 'int' }
        members:
                nidents: '%u'
                idents: 'none'
                add_info: 'if (!changes->nidents) {
                               wrtn += fprintf(stream, " ~\n");
                               return wrtn;
                           }'
                idents[]changes->nidents: ' - 0x%016lx'
 
      - name: "xnvme_lba_range"
        obj:  "range"
        arguments: { range: 'struct xnvme_lba_range *', opts: 'int' }
        members:
                slba: '0x%016lx'
                elba: '0x%016lx'
                naddrs: '%u'
                nbytes: '%zu'
                attr:
                     is_zones: '%d'
                     is_valid: '%d'

      - name: "xnvme_znd_report"
        obj:  "report"
        arguments: { report: 'const struct xnvme_znd_report *', flags: 'int' }
        members:
                report_nbytes: '%zu'
                entries_nbytes: '%zu'
                zd_nbytes:      '%d'
                zdext_nbytes:   '%d'
                zrent_nbytes:   '%d'
                zslba:          '0x%016lx'
                zelba:          '0x%016lx'
                nzones:         '%zu'
                nentries:       '%u'
                extended:       '%u'
                entries:        'none'
                add_info:       'if (!report->nentries) {
                                      wrtn += fprintf(stream, " ~\n");
                                      return wrtn;
                                 }'
                report->nentries[]yaml:
                        info: 'struct xnvme_spec_znd_descr *descr = XNVME_ZND_REPORT_DESCR(report, i);'
                        xnvme_spec_znd_descr_fpr_yaml: ['stream', 'descr', '0', '", "']

      - name: "xnvme_enumeration"
        obj:  "list"
        arguments: { list: 'struct xnvme_enumeration *', opts: 'int' }
        members:
                capacity: '%u'
                nentries: '%u'
                entries:  'none'
                add_info: 'if (!list->nentries) {
                               wrtn += fprintf(stream, " ~\n");
                               return wrtn;
                           }'
                list->nentries[]yaml:
                        info: 'struct xnvme_ident *entry = &list->entries[i];'
                        xnvme_ident_yaml: ['stream', 'entry', '0', '", "', '0']

      - name: "xnvme_lba"
        obj:  "lba"
        arguments: { lba: 'const uint64_t *', nlb: 'uint16_t', opts: 'enum xnvme_pr' }
        members:
                nlbas: {mem_fmt: '%d', mem_val: 'nlb'}
                lbas:  'none'
                nlb[]yaml:
                        xnvme_lba_pr: ['lba[i]', 'XNVME_PR_TERSE']

      - name: "xnvme_dev"
        obj:  "dev"
        arguments: { dev: 'const struct xnvme_dev *', opts: 'int' }
        members:
                '{}yaml':
                        xnvme_ident_yaml: ['stream', '&dev->ident', '2', '"\n"', '1' ]
                        xnvme_be_yaml: ['stream', '&dev->be', '2', '"\n"', '1' ]
                        xnvme_dev_cmd_opts_yaml: ['stream', 'dev', '2', '"\n"', '1' ]
                        xnvme_geo_yaml: ['stream', '&dev->geo', '2', '"\n"', '1' ]

      - name: "xnvme_ver"
        obj: "ver"
        arguments: { opts: 'int' }
        members:
                 ver: 'none'
                 major: {mem_fmt: '%d', mem_val: 'xnvme_ver_major()'}
                 minor: {mem_fmt: '%d', mem_val: 'xnvme_ver_minor()'}
                 patch: {mem_fmt: '%d', mem_val: 'xnvme_ver_patch()'}

      - name: "xnvme_be_attr"
        obj:  "attr"
        arguments: { attr: 'const struct xnvme_be_attr *', opts: 'int' }
        members:
                name: '%s'
                enabled: '%d'
                schemes: 'none'
                schemes[]attr->nschemes: '%s'

      - name: "xnvme_be_attr_list"
        obj:  "list"
        arguments: { list: 'const struct xnvme_be_attr_list *', opts: 'int' }
        members:
                xnvme_be_attr_list: 'none'
                count: '%d'
                capacity: '%d'
                items: 'none'
                add_info:  'if (!list->count) {
                               wrtn += fprintf(stream, "~\n");
                               return wrtn;
                            }'
                list->count[]yaml:
                        xnvme_be_attr_fpr: ['stream', '&g_xnvme_be_registry[i]->attr', 'opts']
